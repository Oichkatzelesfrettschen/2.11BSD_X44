	@(#)syscalls.master	8.6 (Berkeley) 3/30/95
; System call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	    always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0   STD     	{int indir(); }
1   STD     	{ int exit(); }
2   STD     	{ int fork(); }
3   STD     	{ int read(); }
4   STD     	{ int write(); }
5   STD     	{ int open(); }
6   STD     	{ int close(); }
7   STD     	{ int wait4(); }
8	OBSOL		old creat
9   STD     	{ int link(); }
10  STD     	{ int unlink(); }
11  STD     	{ int execv(); }
12  STD     	{ int chdir(); }
13  STD     	{ int fchdir(); }
14  STD     	{ int mknod(); }
15  STD     	{ int chmod(); }
16  STD     	{ int chown(); }
17  STD     	{ int chflags(); }
18  STD     	{ int fchflags(); }
19	STD			{ int lseek(); }
20  STD     	{ int getpid(); }
21  STD     	{ int mount(); }
22  STD     	{ int umount(); }
23  STD     	{ int __sysctl(); }
24  STD     	{ int getuid(); }
25  STD     	{ int geteuid(); }
26  STD     	{ int ptrace(); }
27  STD     	{ int getppid(); }
28  STD     	{ int statfs(); }
29  STD     	{ int fstatfs(); }
30  STD     	{ int getfsstat(); }
31  STD     	{ int sigaction(); }
32  STD     	{ int sigprocmask(); }
33  STD     	{ int access(); }
34  STD     	{ int sigpending(); }
35  STD     	{ int sigaltstack(); }
36  STD     	{ int sync(); }
37  STD     	{ int kill(); }
38	STD			{ int stat(); }
39  STD     	{ int getlogin(); }
40	STD			{ int lstat(); }
41  STD     	{ int dup(); }
42  STD     	{ int pipe(); }     	
43  STD     	{ int setlogin(); }
44  STD     	{ int profil(); }
45  STD     	{ int setuid(); }
46  STD     	{ int seteuid(); }
47  STD     	{ int getgid(); }
48  STD     	{ int getegid(); }
49  STD     	{ int setgid(); }
50  STD     	{ int setegid(); }
51	STD			{ int acct(); } 
52  STD     	{ int phys(); }
53  STD     	{ int lock(); }
54  STD     	{ int ioctl(); }
55  STD     	{ int reboot(); }
56  STD     	{ int sigwait(); }
57  STD     	{ int symlink(); }
58  STD     	{ int readlink(); }
59  STD     	{ int execve(); }
60  STD     	{ int umask(); }
61  STD     	{ int chroot(); }
62  STD     	{ int fstat(); }
63  UNIMPL
64	OBSOL		old getpagesize
65  STD     	{ int pselect(); }
66  STD     	{ int vfork(); }
67	UNIMPL
68	UNIMPL
69  STD   		{ int sbrk(); }
70	UNIMPL
71	UNIMPL
72	UNIMPL
73	UNIMPL
74	UNIMPL
75	UNIMPL
76  OBSOL   	 old vhangup
77  UNIMPL
78	UNIMPL
79  STD     	{ int getgroups(); }
80  STD     	{ int setgroups(); }
81  STD     	{ int getpgrp(); }
82  STD     	{ int setpgrp(); }
83  STD     	{ int setitimer(); }
84  OBSOL   	wait, int wait3 		/* COMPAT */
85  UNIMPL
86  STD     	{ int getitimer(); }
87  OBSOL   	old gethostname
88  OBSOL   	old sethostname
89  STD     	{ int getdtablesize(); }
90  STD     	{ int dup2(); }
91  UNIMPL
92  STD     	{ int fcntl(); }
93  STD     	{ int select(); }
94  UNIMPL
95  STD     	{ int fsync(); }
96  STD     	{ int setpriority(); }
97  STD     	{ int socket(); }
98  STD     	{ int connect(); }
99  STD     	{ int accept(); }
100 STD     	{ int getpriority(); }
101 STD     	{ int send(); }
102 STD     	{ int recv(); }
103 STD     	{ int sigreturn(); }
104 STD     	{ int bind(); }
105 STD     	{ int setsockopt(); }
106 STD     	{ int listen(); }
107 STD     	{ int sigsuspend(); }
108 OBSOL   	old sigvec
109 OBSOL   	old sigblock
110 OBSOL   	old sigsetmask
111 OBSOL   	old sigpause
112 COMPAT-43 	{ int sigstack(); }
113 STD     	{ int recvmsg(); }
114 STD     	{ int sendmsg(); }
115 UNIMPL
116 STD     	{ int gettimeofday(); }
117 STD     	{ int getrusage(); }
118 STD     	{ int getsockopt(); }
119 UNIMPL
120 STD     	{ int readv(); }
121 STD     	{ int writev(); }
122 STD     	{ int settimeofday(); }
123 STD     	{ int fchown(); }
124 STD     	{ int fchmod(); }
125 STD     	{ int recvfrom(); }
126 OBSOL   	old setreuid
127 OBSOL   	old setregid
128 STD     	{ int rename(); }
129	STD			{ int truncate(); }
130	STD			{ int ftruncate(); }
131 STD     	{ int flock(); }
132 UNIMPL
133 STD     	{ int sendto(); }
134 STD     	{ int shutdown(); }
135 STD     	{ int socketpair(); }
136 STD     	{ int mkdir(); }
137 STD     	{ int rmdir(); }
138 STD     	{ int utimes(); }
139 UNIMPL
140 STD     	{ int adjtime(); }
141 STD     	{ int getpeername(); }
142 OBSOL   	old gethostid
143 OBSOL   	old sethostid
144 STD     	{ int getrlimit(); }
145 STD     	{ int setrlimit(); }
146 STD     	{ int killpg(); }
147 UNIMPL
148 OBSOL     	old setquota
149 STD     	{ int quota(); }
150 STD     	{ int getsockname(); }
; Syscalls 151-160 are special for 2BSD
151 UNIMPL
152 OBSOL     	old nostk
153 OBSOL     	old fetchi
154 OBSOL     	old ucall
155 OBSOL     	old fperr

; LFS Syscalls
156	STD			{ int lfs_bmapv(fsid_t *fsidp, \
			    	struct block_info *blkiov, int blkcnt); }
157	STD			{ int lfs_markv(fsid_t *fsidp, \
			    	struct block_info *blkiov, int blkcnt); }
158	STD			{ int lfs_segclean(fsid_t *fsidp, u_long segment); }
159	STD			{ int lfs_segwait(fsid_t *fsidp, struct timeval *tv); }


; VFS Related syscalls
21	STD			{ int mount(char *type, char *path, int flags, \
			    caddr_t data); }
22	STD			{ int unmount(char *path, int flags); }
36	STD		    { int sync(void); }
148	STD		    { int quotactl(char *path, int cmd, int uid, \
			        caddr_t arg); }
157	STD		    { int statfs(char *path, struct statfs *buf); }
158	STD		    { int fstatfs(int fd, struct statfs *buf); }
18	STD		    { int getfsstat(struct statfs *buf, long bufsize, \
			        int flags); }
13	STD		    { int fchdir(int fd); }
12	STD		    { int chdir(char *path); }
61	STD		    { int chroot(char *path); }
5	STD		    { int open(char *path, int flags, int mode); }
14	STD		    { int mknod(char *path, int mode, int dev); }
132	STD		    { int mkfifo(char *path, int mode); }
9	STD		    { int link(char *path, char *link); }
57	STD		    { int symlink(char *path, char *link); }
205	STD		    { int undelete(char *path); }
10	STD		    { int unlink(char *path); }
199	STD		    { off_t lseek(int fd, int pad, off_t offset, \
			        int whence); }
33	STD		    { int access(char *path, int flags); }
188	STD		    { int stat(char *path, struct stat *ub); }
190	STD		    { int lstat(char *path, struct stat *ub); }
191	STD		    { int pathconf(char *path, int name); }
58	STD		    { int readlink(char *path, char *buf, int count); }
34	STD		    { int chflags(char *path, int flags); }
35	STD		    { int fchflags(int fd, int flags); }
15	STD		    { int chmod(char *path, int mode); }
124	STD		    { int fchmod(int fd, int mode); }
16	STD		    { int chown(char *path, int uid, int gid); }
123	STD		    { int fchown(int fd, int uid, int gid); }
138	STD		    { int utimes(char *path, struct timeval *tptr); }
200	STD		    { int truncate(char *path, int pad, off_t length); }
201	STD		    { int ftruncate(int fd, int pad, off_t length); }
95	STD		    { int fsync(int fd); }
128	STD		    { int rename(char *from, char *to); }
136	STD		    { int mkdir(char *path, int mode); }
137	STD		    { int rmdir(char *path); }
196	STD		    { int getdirentries(int fd, char *buf, u_int count, \
			        long *basep); }
60	STD		    { int umask(int newmask); }
56	STD		    { int revoke(char *path); }

8	COMPAT_43	{ int creat(char *path, int mode); }
19	COMPAT_43	{ long lseek(int fd, long offset, int whence); }
38	COMPAT_43	{ int stat(char *path, struct ostat *ub); }
40	COMPAT_43	{ int lstat(char *path, struct ostat *ub); }
129	COMPAT_43	{ int truncate(char *path, long length); }
130	COMPAT_43	{ int ftruncate(int fd, long length); }
156	COMPAT_43	{ int getdirentries(int fd, char *buf, u_int count, \
			        long *basep); }

; VM Related syscalls
69	STD			{ int sbrk(int incr); }
70	STD			{ int sstk(int incr); }
197	STD			{ caddr_t mmap(caddr_t addr, size_t len, int prot, \
			    	int flags, int fd, long pad, off_t pos); }
65	STD			{ int msync(caddr_t addr, int len); }
73	STD			{ int munmap(caddr_t addr, int len); }

74	STD			{ int mprotect(caddr_t addr, int len, int prot); }
75	STD			{ int madvise(caddr_t addr, int len, int behav); }
78	STD			{ int mincore(caddr_t addr, int len, char *vec); }
203	STD			{ int mlock(caddr_t addr, size_t len); }
204	STD			{ int munlock(caddr_t addr, size_t len); }
64	COMPAT_43	{ int getpagesize(void); }
71	COMPAT_43	{ int mmap(caddr_t addr, int len, int prot, \
			    	int flags, int fd, long pos); }