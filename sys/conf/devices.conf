#	@(#)devices	8.10 (Berkeley) 5/1/94
# 	machine-independent device definitions & attributes

#
# Device Classes
#
devclass 								disk
devclass 								tape
devclass 								ifnet
devclass 								tty

# options understood by the machine-independent part of the kernel
# (note, these are case-sensitive)
#

# Attributes which machine-independent bus support can be attached to.
# These should be defined here, because some of these busses can have
# devices which provide these attributes, and we'd like to avoid hairy
# ordering constraints on inclusion of the busses' "files" files.

define								isabus { }							# ISA attachment
define								eisabus { }							# EISA attachment
define								pcibus {[bus = -1]}					# PCI attachment
define								mcabus { }							# MCA attachment (MicroChannel)
define								usbus { }							# USB attachment
define								pcmciabus {[controller = -1],[socket = -1]}	# PCMCIA bus attachment
define								pcmciaslot {[slot = -1]}				# PCMCIA slot itself

#
# Generic Attributes
#

#
# AUDIO Attributes
#
define	 							audiobus { }
define								midibus { }
define								midisyn
define								mulaw
define								auconv
define								aurateconv
define								audiobell

#
# DISK Attributes
#
define								ata {[channel = -1]}
define								ata_dma
define								ata_hl {[drive = -1]}
define	 							atapi { }
define	                  				scsi_core
define	 							scsi {[channel = -1]}: scsi_core 
define								wdc_base

#
# NETWORK Attributes 
# we have generic code for arc(net), ether(net), fddi, and atm.
#
define								arc
define								atm
define								ether
define								fddi
define								hippi
define								ieee1394
define								token
define								sppp
define								wlan: arc4, rijndael
define								crypto
define	                  				bpf_filter

# ARPing IPv4 pull this in:
define								arp

# VIDEO Attributes
define 								pckbport {[slot = -1]}
define								pckbport_machdep_cnattach
define								videobus { }

#
# WSCONS & PCCONS Attributes
# device attributes: display, display with emulator, keyboard, and mouse
#
define								wsdisplaydev {[kbdmux = 1]}
define								wsemuldisplaydev {[console = -1], [kbdmux = 1]}
define								wsmousedev	 {[mux = 0]}
define								wskbddev {[console = -1], [mux = 1]}
define								pcdisplayops

#
# USB Devices & Attributes
#

#defparam USB_MEM_RESERVE

# UHCI USB controller
#device	uhci: usbus
#file	dev/usb/uhci.c						uhci			needs-flag

# OHCI USB controller
#device	ohci: usbus
#file	dev/usb/ohci.c						ohci			needs-flag

# EHCI USB controller
#device	ehci: usbus
#file	dev/usb/ehci.c						ehci			needs-flag

#
# PSEUDO-DEVICES legitimate
#
defpseudo  	vnd:							disk
defpseudo 	 	ccd:						disk
defpseudo	md:							disk

defpseudo 		pty: 						tty
defpseudo 		tb: 						tty
defpseudo 	  	rnd
defpseudo 	  	ksyms

#defpseudo 		imp: 						ifnet
defpseudo 		loop: 					ifnet
defpseudo 		sl: 						ifnet
defpseudo 		ppp:						ifnet, bpf_filter
defpseudo 		pppoe:					ifnet, ether, sppp
defpseudo 		sppp:						ifnet
defpseudo 		tun: 						ifnet
defpseudo 		vlan:						ifnet, ether
defpseudo 		bridge:					ifnet, ether
defpseudo 		bpfilter:					ifnet, bpf_filter
defpseudo 		strip: 					ifnet
defpseudo 		gre:						ifnet
defpseudo 		gif:						ifnet
defpseudo 		faith:					ifnet
defpseudo 		mpls:					ifnet
defpseudo 		stf:					ifnet

defpseudo     		sequencer

#
# Device Config Files
#
include 	"dev/files.dev"
