#	$NetBSD: GENERIC,v 1.114.2.11 1998/07/27 15:33:32 mellon Exp $
#
#	GENERIC -- everything that's currently supported
#

machine 		i386
maxusers		32				# estimated number of users

#options		OVERLAY			# enables overlay space
#options		OVLPAGER			# overlay pager (required if using overlays!!)

options			SWAPPAGER		# paging
options 		VNODEPAGER		# mmap() of files
options 		DEVPAGER		# mmap() of devices

options			EXEC_AOUT		# exec a.out binaries
options 			EXEC_ELF32			# exec ELF binaries
#options 			EXEC_XCOFF32		# exec XCOFF binaries
#options 			EXEC_MACHO		# exec MACH-O binaries
options			EXEC_SCRIPT		# exec #! scripts


options 		INET6_MD_CKSUM		# machine-dependant code for in6_cksum
#options 		CRYPTO_MD_DES_ENC	# machine-dependant code for DES
#options 		CRYPTO_MD_DES_CBC	# machine-dependant DES CBC code
#options 		CRYPTO_MD_BF_ENC	# machine-dependant code for BF_encrypt
#options 		CRYPTO_MD_BF_CBC	# careful: uses bswapl, requires 486

# CPU support.  At least one is REQUIRED.
options 		I386_CPU
options 		I486_CPU
options 		I586_CPU
options 		I686_CPU

# CPU-related options.

# This option allows you to force a serial console at the specified
# I/O address.   see console(4) for details.
#options 		CONSDEVNAME="\"com\"",CONADDR=0x2f8,CONSPEED=57600
#	you don't want the option below ON iff you are using the
#	serial console option of the new boot strap code.
#options 		CONS_OVERRIDE	# Always use above! independent of boot info

# Standard system options
options 		UCONSOLE		# users can use TIOCCONS (for xconsole)
options 		INSECURE		# disable kernel security levels

options 		RTC_OFFSET=0	# hardware clock is this many mins. west of GMT

options			KTRACE			# system call tracing, a la ktrace(1)

# Diagnostic/debugging support options
options		  DIAGNOSTIC		# internal consistency checks
#options 		DEBUG			# expensive debugging checks/support
options			ACCOUNTING		# acct(2) process accounting
#options		KMEMSTATS		# collect malloc(9) statistics
options 		DDB				# in-kernel debugger
options			PTRACE			# ptrace(2) system call


# Compatibility options
#options 	TCP_COMPAT_42			# 4.2BSD TCP/IP bug compat. Not recommended.

# File systems
file-system 		FFS			# UFS
file-system 		LFS			# log-structured file system
file-system 		MFS			# memory file system
#file-system 		UFS211			# 2.11BSD's UFS
file-system 		CD9660			# ISO 9660 + Rock Ridge file system
file-system 		MSDOSFS			# MS-DOS file system
file-system 		FDESC			# /dev/fd
file-system 		FIFO			# FIFOs; RECOMMENDED
file-system 		UNION			# union file system
file-system 		UFML			# ufml file system

# File system options
options			QUOTA			# UFS quotas

# Disk Format options
#options			DK_SLICES		# enable diskslices (WIP)

# Networking options
#options 		GATEWAY			# packet forwarding
options 		INET			    	# IP + ICMP + TCP + UDP
options 		INET6			    	# IPV6
options		FAST_IPSEC    		# IP security with opencrypto
#options 		IPSEC				# IP security
#options 		IPSEC_ESP			# IP security (encryption part; define w/IPSEC)
#options 		IPSEC_DEBUG			# debug for IP security
#options 		MROUTING			# IP multicast routing
options 		NS			     	# XNS
#options 		NSIP				  # XNS tunneling over IP
options 		PPP_BSDCOMP			# BSD-Compress compression support for PPP
options 		PPP_DEFLATE			# Deflate compression support for PPP
options 		PPP_FILTER			# Active filter support for PPP (requires bpf)
options 		PFIL_HOOKS			# pfil(9) packet filter hooks
options 		IPFILTER_LOG		# ipmon(8) log support
#options 		IPFILTER_DEFAULT_BLOCK	# block all packets by default
#options 		TCP_DEBUG			# Record last TCP_NDEBUG packets with SO_DEBUG

#options 		ALTQ				# Manipulate network interfaces' output queues
#options 		ALTQ_BLUE			# Stochastic Fair Blue
#options 		ALTQ_CBQ			# Class-Based Queueing
#options 		ALTQ_CDNR			# Diffserv Traffic Conditioner
#options 		ALTQ_FIFOQ			# First-In First-Out Queue
#options 		ALTQ_FLOWVALVE		# RED/flow-valve (red-penalty-box)
#options 		ALTQ_HFSC			# Hierarchical Fair Service Curve
#options 		ALTQ_LOCALQ			# Local queueing discipline
#options 		ALTQ_PRIQ			# Priority Queueing
#options 		ALTQ_RED			# Random Early Detection
#options 		ALTQ_RIO			# RED with IN/OUT
#options 		ALTQ_WFQ			# Weighted Fair Queueing

# These options enable verbose messages for several subsystems.
# Warning, these may compile large string tables into the kernel!
options 	  	EISAVERBOSE			# verbose EISA device autoconfig messages
options 		PCIVERBOSE			# verbose PCI device autoconfig messages
options 		PCMCIAVERBOSE		# verbose PCMCIA configuration messages
options 		MCAVERBOSE			# verbose MCA device autoconfig messages
options 		SCSIVERBOSE			# human readable SCSI error messages
#options 		USBVERBOSE			# verbose USB device autoconfig messages
#options 		HDAUDIOVERBOSE		# verbose HDAUDIO driver messages

#
# wscons options
#
# builtin terminal emulations
#options 		WSEMUL_SUN					# sun terminal emulation
options 		WSEMUL_VT100				# VT100 / VT220 emulation
# different kernel output - see dev/wscons/wsdisplayvar.h
options 		WS_KERNEL_FG=WSCOL_WHITE
#options 		WS_KERNEL_BG=WSCOL_BLACK
# compatibility to other console drivers
options 		WSDISPLAY_COMPAT_PCVT		# emulate some ioctls
options 		WSDISPLAY_COMPAT_SYSCONS	# emulate some ioctls
options 		WSDISPLAY_COMPAT_USL		# VT handling
options 		WSDISPLAY_COMPAT_RAWKBD		# can get raw scancodes
# see dev/pckbc/wskbdmap_mfii.c for implemented layouts
#options 		PCKBD_LAYOUT="(KB_DE | KB_NODEAD)"
# allocate a number of virtual screens at autoconfiguration time
#options 		WSDISPLAY_DEFAULTSCREENS=4
# use a large software cursor that doesn't blink
options 		PCDISPLAY_SOFTCURSOR
# modify the screen type of the console; defaults to "80x25"
#options 		VGA_CONSOLE_SCREENTYPE="\"80x24\""
# work around a hardware bug that loaded fonts don't work; found on ATI cards
#options 		VGA_CONSOLE_ATI_BROKEN_FONTSEL
# the following enables some functions to get mouse console support.
# if you want a really secure system, it may be better not to enable them,
# see wsmoused(8), section SECURITY CONSIDERATIONS for more info.
#options 		WSDISPLAY_CHARFUNCS		# mouse console support
# console scrolling support.
#options		WSDISPLAY_SCROLLSUPPORT
# enable VGA raster mode capable of displaying multilingual text on console
#options 		VGA_RASTERCONSOLE

# Kernel root file system and dump configuration.
config			twobsd	root on ? type ?
#config			twobsd	root on sd0a type ffs
#config			twobsd	root on ? type nfs

#
# Device configuration
#

mainbus0    	at root
cpu0 			at mainbus?
ioapic* 		at mainbus?

# Tuning for power management, see apm(4) for more details.
#options	APM_DISABLE
#options	APM_V10_ONLY
#options	APM_NO_V12
#options	APMDEBUG
#options	APM_POWER_PRINT

#apm0		at mainbus0		# Advanced power management

# PCI bus support
pci*			at mainbus? bus ?
pci*			at pchb? bus ?
pci*			at ppb? bus ?

# Configure PCI using BIOS information
#options 	PCIBIOS				# PCI BIOS support
#options 	PCIBIOSVERBOSE			# PCI BIOS verbose info
#options 	PCIBIOS_ADDR_FIXUP		# fixup PCI I/O addresses
#options 	PCIBIOS_BUS_FIXUP		# fixup PCI bus numbering
#options 	PCIBIOS_INTR_FIXUP		# fixup PCI interrupt routing
#options 	PCIBIOS_IRQS_HINT=0x0a00 	# PCI interrupts hint. IRQ 9 or 11
#options 	PCIBIOS_INTR_GUESS		# see pcibios(4)
#options 	PCIINTR_DEBUG			# super-verbose PCI interrupt fixup

# PCI bridges
pchb*			at pci? dev ? function ?	# PCI-Host bridges
pceb*			at pci? dev ? function ?	# PCI-EISA bridges
pcib*			at pci? dev ? function ?	# PCI-ISA bridges
pcmb*			at pci? dev ? function ?	# PCI-MCA bridges
ppb*			at pci? dev ? function ?	# PCI-PCI bridges
puc*			at pci? dev ? function ?	# PCI "universal" comm. cards

agp* 			at pchb?

# EISA bus support
eisa0			at mainbus?
eisa0			at pceb?

# ISA bus support
isa0			at mainbus?
isa0			at pceb?
isa0			at pcib?

# PCMCIA bus support
pcmcia* 		at pcic? controller ? socket ?

# MCA bus support
mca0			at mainbus?

# ISA PCMCIA controllers
pcic0			at isa? port 0x3e0 iomem 0xd0000 iosiz 0x10000
pcic1			at isa? port 0x3e2 iomem 0xe0000 iosiz 0x4000
pcic2			at isa? port 0x3e4 iomem 0xe0000 iosiz 0x4000

# PCI PCMCIA controllers
pcic0			at pci? dev? function ?

# ISA Plug-and-Play bus support
isapnp0 		at isa?

# ISA Plug-and-Play PCMCIA controllers
pcic*			at isapnp?

# Coprocessor Support
# Math Coprocessor support
npx0			at isa? port 0xf0 irq 13	# x86 math coprocessor

# Console Devices
# ISA console
# wscons
pckbc0			at isa?						# PC keyboard controller
pckbd*			at pckbc?					# PC keyboard
pms*			at pckbc?					# PS/2 mouse for wsmouse
vga0			at isa?
vga*			at pci? dev ? function ?
pcdisplay0		at isa?						# CGA, MDA, EGA, HGA
wsdisplay*		at vga? console ?
wsdisplay*		at pcdisplay? console ?
wsdisplay*		at wsemuldisplaydev?
wskbd*			at pckbd? console ?
wsmouse*		at pms? mux 0
wsmouse*		at wsmousedev?

pcppi0			at isa?
sysbeep0		at pcppi?

# Serial Devices

# PCI serial interfaces
com*			at puc? port ?				# 16x50s on "universal" comm boards

# ISA Plug-and-Play serial interfaces
#com*			at isapnp?			# Modems and serial boards

# PCMCIA serial interfaces
#com*			at pcmcia? function ?		# Modems and serial cards

# ISA serial interfaces
options 		COM_HAYESP					# adds Hayes ESP serial board support
com0			at isa? port 0x3f8 irq 4	# Standard PC serial ports
com1			at isa? port 0x2f8 irq 3
com2			at isa? port 0x3e8 irq 5

# MCA serial interfaces
com*			at mca? slot ?			# 16x50s on comm boards

# Parallel Printer Interfaces

# PCI parallel printer interfaces
#lpt*			at puc? port ?			# || ports on "universal" comm boards

# ISA parallel printer interfaces
#lpt0			at isa? port 0x378 irq 7	# standard PC parallel ports
#lpt1			at isa? port 0x278
#lpt2			at isa? port 0x3bc

# SCSI Controllers and Devices

# SCSI bus support
scsibus* 		at scsi?

# SCSI devices
sd*			at scsibus? target ? lun ?	# SCSI disk drives
st*			at scsibus? target ? lun ?	# SCSI tape drives
cd*			at scsibus? target ? lun ?	# SCSI CD-ROM drives
ch*			at scsibus? target ? lun ?	# SCSI autochangers
ses*		at scsibus? target ? lun ?	# SCSI Enclosure Services devices
ss*			at scsibus? target ? lun ?	# SCSI scanners
uk*			at scsibus? target ? lun ?	# SCSI unknown

# IDE and related devices
# PCI IDE controllers - see pciide(4) for supported hardware.
# The 0x0001 flag force the driver to use DMA, even if the driver doesn't know
# how to set up DMA modes for this chip. This may work, or may cause
# a machine hang with some controllers.
pciide* 		at pci? dev ? function ? flags 0x0000	# GENERIC pciide driver

# ISA Plug-and-Play IDE controllers
wdc*			at isapnp?

# PCMCIA IDE controllers
wdc*			at pcmcia? function ?

# ISA ST506, ESDI, and IDE controllers
# Use flags 0x01 if you want to try to use 32bits data I/O (the driver will
# fall back to 16bits I/O if 32bits I/O are not functional).
# Some controllers pass the initial 32bit test, but will fail later.
wdc0			at isa? port 0x1f0 irq 14 flags 0x00
wdc1			at isa? port 0x170 irq 15 flags 0x00

# ATA (IDE) bus support
atabus* 		at ata?
options 		ATADEBUG

# IDE drives
# Flags are used only with controllers that support DMA operations
# and mode settings (e.g. some pciide controllers)
# The lowest order four bits (rightmost digit) of the flags define the PIO
# mode to use, the next set of four bits the DMA mode and the third set the
# UltraDMA mode. For each set of four bits, the 3 lower bits define the mode
# to use, and the last bit must be 1 for this setting to be used.
# For DMA and UDMA, 0xf (1111) means 'disable'.
# 0x0fac means 'use PIO mode 4, DMA mode 2, disable UltraDMA'.
# (0xc=1100, 0xa=1010, 0xf=1111)
# 0x0000 means "use whatever the drive claims to support".
wd*				at atabus? drive ? flags 0x0000

# ATAPI bus support
atapibus* 		at atapi?

# ATAPI devices
# flags have the same meaning as for IDE drives.
cd*			at atapibus? drive ? flags 0x0000	# ATAPI CD-ROM drives
sd*			at atapibus? drive ? flags 0x0000	# ATAPI disk drives
st*			at atapibus? drive ? flags 0x0000	# ATAPI tape drives
uk*			at atapibus? drive ? flags 0x0000	# ATAPI unknown

# ISA floppy
fdc0	at isa? port 0x3f0 irq 6 drq 2	# standard PC floppy controllers
#fdc1	at isa? port 0x370 irq ? drq ?
fd*	at fdc? drive ?				# the drives themselves
# some machines need you to do this instead of fd*
#fd0	at fdc0 drive 0

# Audio Devices

# Audio support
audio*		at audiobus?

# MIDI support
midi*			at midibus?
midi*			at pcppi?		# MIDI interface to the PC speaker

# The spkr driver provides a simple tone interface to the built in speaker.
#spkr0		at pcppi?		# PC speaker

# Mice

# ISA busmice
lms0			at isa? port 0x23c irq 5	# Logitech bus mouse
lms1			at isa? port 0x238 irq 5
mms0			at isa? port 0x23c irq 5	# Microsoft InPort mouse
mms1			at isa? port 0x238 irq 5
wsmouse*		at lms? mux 0
wsmouse*		at mms? mux 0

# Evdev Support
#options			EVDEV_SUPPORT

#evkbd* 			at wskbddev?
#evmouse* 		at wsmousedev?

# Pseudo-Devices

pseudo-device 	crypto						# opencrypto framework

# disk/mass storage pseudo-devices
pseudo-device	ccd				4			# concatenated/striped disk devices
pseudo-device	vnd				4			# disk-like interface to files

# network pseudo-devices
pseudo-device	bpfilter		8				# Berkeley packet filter
pseudo-device	loop			        			# network loopback
pseudo-device	ppp		    2					# Point-to-Point Protocol
#pseudo-device	pppoe			  				# PPP over Ethernet (RFC 2516)
pseudo-device	sl		    2					# Serial Line IP
pseudo-device	strip		  2					# Starmode Radio IP (Metricom)
pseudo-device	tun		    2					# network tunneling over tty
pseudo-device	gre		    2 				# generic L3 over IP tunnel
pseudo-device	gif		    4					# IPv[46] over IPv[46] tunnel (RFC1933)
pseudo-device	vlan							# IEEE 802.1q encapsulation
#pseudo-device	bridge						# simple inter-network bridging
#options 		BRIDGE_IPF						# bridge uses IP/IPv6 pfil hooks too
pseudo-device	pf							# PF packet filter
pseudo-device	pflog							# PF log if

# miscellaneous pseudo-devices
pseudo-device	rnd						# /dev/random and in-kernel generator
pseudo-device	ksyms							# kernel symbols
pseudo-device	pty				1			# pseudo-terminals
pseudo-device	tb				1		# tablet line discipline
pseudo-device	sequencer		1			# MIDI sequencer

# wscons pseudo-devices
pseudo-device	wsmux						# mouse & keyboard multiplexor
pseudo-device	wsfont

# cmos(4) pseudo-device
pseudo-device	cmos						# cmos
