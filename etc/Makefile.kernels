#	$NetBSD: Makefile,v 1.449 2020/12/29 16:46:44 martin Exp $
#	from: @(#)Makefile	8.7 (Berkeley) 5/25/95

COMPRESS_PROGRAM=${"${USE_XZ_SETS:Uno}"!="no":?${TOOL_XZ}:${TOOL_GZIP}}
XZ_OPT=-9
TAR_SUFF=${"${USE_XZ_SETS:Uno}"!="no":?tar.xz:tgz}

# build kernels --
#	This target builds the kernels specified by each port.
#	A port may specify the following kernels:
#
#	KERNEL_SETS		The list of kernels that will be
#				packaged into sets, named
#				kern-${kernel}.tgz (or .tar.xz).
#				These kernels are also placed in the
#				binary/kernel area of the release package
#				as netbsd-${kernel}.gz.
#
#	EXTRA_KERNELS		Additional kernels to place in the
#				binary/kernel area of the release
#				package as netbsd-${kernel}.gz, but
#				which are not placed into sets. This
#				allows a port to provide e.g. a netbootable
#				installation kernel containing a ramdisk.
#
#	BUILD_KERNELS		Additional kernels to build which are
#				not placed into sets nor into the
#				binary/kernel area of the release
#				package.  These are typically kernels
#				that are built for inclusion only in
#				installation disk/CD-ROM/tape images.
#
#	A port may also specify KERNEL_SUFFIXES, which is an optional list
#	of filename suffixes for kernels to include in the kernel sets and
#	in the binary/kernel area of the release package (e.g. "netbsd" vs.
#	"netbsd.ecoff" and "netbsd.srec").  It is not an error if kernels
#	with these suffixes do not exist in the kernel build directory.
#
#
# A list of all the kernels to build, which can be overridden from
# external sources (such as make(1)'s environment or command line)
#
ALL_KERNELS?=	${KERNEL_SETS} ${EXTRA_KERNELS} ${BUILD_KERNELS}
.export ALL_KERNELS

GETKERNELAWK=	${TOOL_AWK} '/^config/ {print $$2; found=1} \
		END{ if (found == 0) print "twobsd"; }'

build_kernels: .PHONY
#	Configure & compile kernels listed in ${ALL_KERNELS}
#
.if !defined(KERNELS_DONE)						# {
.for configfile in ${ALL_KERNELS:O:u}					# {
build_kernels: kern-${configfile}
kern-${configfile}: .PHONY .MAKE
	cd ${KERNCONFDIR} && ${TOOL_CONFIG} ${CONFIGOPTS} -s ${KERNSRCDIR} \
	    ${MKDEBUGKERNEL == "yes" :? -DDEBUG=-g :} \
	    -b ${KERNOBJDIR}/${configfile:C/.*\///} ${configfile}
.if ${MKUPDATE} == "no"
	${MAKE} -C ${KERNOBJDIR}/${configfile:C/.*\///} distclean
.endif
	${MAKE} -C ${KERNOBJDIR}/${configfile:C/.*\///} depend && \
	${MAKE} -C ${KERNOBJDIR}/${configfile:C/.*\///} && \
	${MAKE} -C ${KERNOBJDIR}/${configfile:C/.*\///} debuginstall
.endfor	# ALL_KERNELS							# }
.endif	# KERNELS_DONE							# }

build_kernelsets: .PHONY
#	Create kernel sets from ${KERNEL_SETS} into
#	${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/sets
#
.for configfile in ${KERNEL_SETS:O:u}					# {
.for configsel in ${ALL_KERNELS:O:u}
.if ${configfile} == ${configsel}
build_kernelsets: kernset-${configfile}
kernset-${configfile}: .PHONY build_kernels snap_pre
	@kernlist=$$(${GETKERNELAWK} ${KERNCONFDIR}/${configfile}); \
	kerndir=${KERNOBJDIR}/${configfile:C/.*\///}; \
	kernsuffixes="${KERNEL_SUFFIXES:S/^/./}"; \
	kern_tgz=${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/sets/kern-${configfile}.${TAR_SUFF}; \
	pax_cmd="GZIP=${GZIP_FLAGS:Q} XZ_OPT=${XZ_OPT:Q} ${TOOL_PAX} ${PAX_TIMESTAMP} --use-compress-program ${COMPRESS_PROGRAM:Q} -O -w -M -N ${NETBSDSRCDIR}/etc -f $${kern_tgz}"; \
	cd $${kerndir} && { \
		kernels=; newest=; \
		for kernel in $${kernlist}; do \
			for s in "" $${kernsuffixes}; do \
				ks="$${kernel}$${s}"; \
				[ -f $${ks} ] || continue; \
				kernels="$${kernels} $${ks}"; \
				[ -z "$${newest}" -o $${ks} \
				    -nt "$${newest}" ] && newest=$${ks}; \
				[ ${MKDEBUGKERNEL} = "no" -o \
				     ! -f $${ks}.gdb ] && continue; \
				kernels="$${kernels} $${ks}.gdb"; \
			done; \
		done; \
		[ $${kern_tgz} -nt "$${newest}" ] || { \
			echo "echo $${kernels} | $${pax_cmd}"; \
			if [ ${KERNEL_DIR} = "yes" ]; then \
				tmpdir=kernel$$; \
				trap "rm -fr $${tmpdir}" 0 1 2 3 15; \
				mkdir -p $${tmpdir}/twobsd; \
				d=./twobsd; \
				cd $${tmpdir}; \
			else \
				d=.; \
			fi; \
			( echo "/set uname=${BINOWN} gname=${BINGRP}"; \
			echo ". type=dir optional"; \
			if [ ${KERNEL_DIR} = "yes" ]; then \
				echo "./twobsd type=dir optional"; \
			fi; \
			for kernel in $${kernels}; do \
				if [ ${KERNEL_DIR} = "yes" ]; then \
					newname=$$(echo $${kernel} | \
					    ${TOOL_SED} -e s/twobsd/kernel/); \
					ln ../$${kernel} ./twobsd/$${newname}; \
				else \
					newname=$${kernel}; \
				fi; \
				echo "$${d}/$${newname} type=file"; \
			done ) | eval $${pax_cmd}; \
			if [ ${KERNEL_DIR} = "yes" ]; then \
				mv $${kern_tgz} ..; \
			fi; \
		} \
	}
.endif
.endfor
.endfor	# KERNEL_SETS							# }

build_releasekernels: .PHONY
#	Build kernel.gz from ${KERNEL_SETS} ${EXTRA_KERNELS} into
#	${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/kernel
#
.for configfile in ${KERNEL_SETS:O:u} ${EXTRA_KERNELS:O:u}		# {
.for configsel in ${ALL_KERNELS:O:u}
.if ${configfile} == ${configsel}
build_releasekernels: releasekern-${configfile}
releasekern-${configfile}: .PHONY build_kernels snap_pre
	@kernlist=$$(${GETKERNELAWK} ${KERNCONFDIR}/${configfile:C/.*\///}); \
	kerndir=${KERNOBJDIR}/${configfile:C/.*\///}; \
	kernsuffixes="${KERNEL_SUFFIXES:S/^/./}"; \
	dest="${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/kernel"; \
	cd $${kerndir} && {	\
		for kernel in $${kernlist}; do \
			for s in "" $${kernsuffixes}; do \
				ks="$${kernel}$${s}"; \
				[ ! -f $${ks} ] && continue; \
				knl_gz="$${dest}/$${kernel}-${configfile:C/.*\///}$${s}.gz"; \
				[ $${knl_gz} -nt $${ks} ] && continue; \
				rm -f $${knl_gz}; \
				echo "${TOOL_GZIP} ${GZIP_FLAGS} -c < $${kerndir}/$${ks} > $${knl_gz}"; \
				${TOOL_GZIP} ${GZIP_FLAGS} -c < $${ks} > $${knl_gz}; \
			done; \
		done; \
	}
.endif
.endfor
.endfor	# KERNEL_SETS EXTRA_KERNELS					# }

# install-debugkernels:
#	Create fake kernel debug files to satisfy the sets requirements
#	They will be later replaced with the real ones if we are building
#	kernels. This mess is needed because checkflist runs before the
#	kernels are built. It should really run before the sets are build.
install-debugkernels:
.if ${MKDEBUG:Uno} == "yes"
	@for i in $$(${NETBSDSRCDIR}/distrib/sets/makeflist debug | \
	    ${TOOL_GREP} -E '^./usr/libdata/debug/(nfs)?twobsd-'); do \
		echo touch ${DESTDIR}/$$i; \
		touch ${DESTDIR}/$$i; \
	done
.	for k in ${ALL_KERNELS}
install-debugkernels: ${DESTDIR}${DEBUGDIR}/twobsd-${k}.debug
		
${DESTDIR}${DEBUGDIR}/twobsd-${k}.debug:
	${_MKTARGET_INSTALL}
	touch ${.TARGET}
.	endfor
.endif
