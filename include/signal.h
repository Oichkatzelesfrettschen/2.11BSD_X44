/*
 * Copyright (c) 1986 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 *
 *	@(#)signal.h	1.1 (2.10BSD Berkeley) 12/1/86
 */

#ifndef _SIGNAL_H_
#define _SIGNAL_H_

#include <sys/types.h>
#include <sys/cdefs.h>
#include <sys/signal.h>

#if defined(__BSD_VISIBLE)
extern const char *sys_signame[];
#ifndef __SYS_SIGLIST_DECLARED
#define __SYS_SIGLIST_DECLARED
/* also in unistd.h */
extern const char *sys_siglist[];
#endif /* __SYS_SIGLIST_DECLARED */
extern const int sys_nsigname;
extern const int sys_nsiglist;
#endif /* __BSD_VISIBLE */

#if defined(__BSD_VISIBLE)
/* 2.11BSD Compatability: No siginfo in kernel */
#ifndef __SIGINFO_DECLARED
#define __SIGINFO_DECLARED
struct siginfo {
    int 			si_signo;
	int 			si_code;
	int			si_errno;
	union {
		char		pad[128];
		struct {
			uid_t 	uid;
			pid_t 	pid;
		} proc;
	} si_data;
#define si_pad	    si_data.pad
#define si_uid	    si_data.proc.uid
#define si_pid	    si_data.proc.pid
};

typedef struct siginfo siginfo_t;

/** si_code */
#define	SI_USER		0	/* Sent by kill(2)			*/
#define	SI_QUEUE	-1	/* Sent by the sigqueue(2)		*/
#define	SI_TIMER	-2	/* Generated by expiration of a timer	*/
				/* set by timer_settime(2)		*/
#define	SI_ASYNCIO	-3	/* Generated by completion of an	*/
				/* asynchronous I/O signal		*/
#define	SI_MESGQ	-4	/* Generated by arrival of a message on	*/
				/* an empty message queue		*/

#endif /* __SIGINFO_DECLARED */
#endif /* __BSD_VISIBLE */

__BEGIN_DECLS
int		raise(int);
#ifndef	_ANSI_SOURCE
int		kill(pid_t, int);
int		sigaction(int, const struct sigaction *, struct sigaction *);
int		sigaddset(sigset_t *, int);
int		sigdelset(sigset_t *, int);
int		sigemptyset(sigset_t *);
int		sigfillset(sigset_t *);
int		sigismember(const sigset_t *, int);
int		sigpending(sigset_t *);
int		sigprocmask(int, const sigset_t *, sigset_t *);
int		sigsuspend(const sigset_t *);
#ifndef _POSIX_SOURCE
int		killpg(pid_t, int);
int		sigblock(int);
int		siginterrupt(int, int);
int		sigpause(int);
int		sigreturn(struct sigcontext *);
int		sigsetmask(int);
int		sigstack(const struct sigstack *, struct sigstack *);
int		sigvec(int, struct sigvec *, struct sigvec *);
void	psignal(unsigned int, const char *);
#endif	/* !_POSIX_SOURCE */
#endif	/* !_ANSI_SOURCE */
__END_DECLS

#endif	/* !_SIGNAL_H_ */
